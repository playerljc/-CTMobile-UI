{"version":3,"sources":["tree.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_classCallCheck2","_createClass2","_uiUtil","_treenode","init","_this$config$nodeConf","this","config","nodeConfig","_nodeConfig$config","_nodeConfig$data","data","df","document","createDocumentFragment","i","length","treeNode","createNode","call","globalConfig","parentNode","nodes","push","appendChild","getEl","detailItemInputs","el","detailItemInputsRecursive","_ref","tree","_renderChildren","_ref2","leaf","_config$children","children","append","initEvents","listeners","_this$config$listener","keys","p","events","on","find","_ref3","result","key","hasAttr","isLeaf","childrens","Tree","assign","Events","params","_this$config$nodeConf2","unshift","Dom6","prepend","_this$config$nodeConf3","newNode","index","findIndex","n","insertBefore","splice","_this$config$nodeConf4","insertAfter","_this$config$nodeConf5","replaceChild","_this$config$nodeConf6","replaceNode","remove","concat","type","handler","clear","clearAll","TreeFactory","create","_default"],"mappings":"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","file":"tree.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _uiUtil = require(\"@ctmobile/ui-util\");\n\nvar _treenode = _interopRequireDefault(require(\"./treenode\"));\n\n/**\r\n * init\r\n * @access private\r\n */\nfunction init() {\n  var _this$config$nodeConf = this.config.nodeConfig,\n      nodeConfig = _this$config$nodeConf === void 0 ? {} : _this$config$nodeConf;\n  var _nodeConfig$config = nodeConfig.config,\n      config = _nodeConfig$config === void 0 ? {} : _nodeConfig$config,\n      _nodeConfig$data = nodeConfig.data,\n      data = _nodeConfig$data === void 0 ? [] : _nodeConfig$data;\n  var df = document.createDocumentFragment();\n\n  for (var i = 0; i < data.length; i++) {\n    var treeNode = createNode.call(this, {\n      globalConfig: config,\n      config: data[i],\n      parentNode: null\n    });\n    this.nodes.push(treeNode);\n    df.appendChild(treeNode.getEl());\n  } // 处理checkbox和radio的选中\n\n\n  detailItemInputs.call(this);\n  this.el.appendChild(df);\n}\n/**\r\n * detailItemInputs\r\n * 处理inputItem的默认值，比如checkbox,radio的选中\r\n * @access private\r\n */\n\n\nfunction detailItemInputs() {\n  for (var i = 0; i < this.nodes.length; i++) {\n    this.nodes[i].detailItemInputsRecursive();\n  }\n}\n/**\r\n * createNode\r\n * @param {Object} - globalConfig\r\n * @param {Object} - config\r\n * @param {TreeNode} - parentNode\r\n * @access private\r\n */\n\n\nfunction createNode(_ref) {\n  var globalConfig = _ref.globalConfig,\n      config = _ref.config,\n      parentNode = _ref.parentNode;\n  var treeNode = new _treenode.default({\n    globalConfig: globalConfig,\n    config: config,\n    tree: this,\n    parentNode: parentNode\n  });\n\n  _renderChildren.call(this, {\n    parentNode: treeNode,\n    globalConfig: globalConfig,\n    config: config\n  });\n\n  return treeNode;\n}\n/**\r\n * renderChildren\r\n * @param {TreeNode} - parentNode\r\n * @param {Object} - globalConfig\r\n * @param {Object} - config\r\n */\n\n\nfunction _renderChildren(_ref2) {\n  var parentNode = _ref2.parentNode,\n      globalConfig = _ref2.globalConfig,\n      config = _ref2.config;\n\n  if (!config.leaf) {\n    var _config$children = config.children,\n        children = _config$children === void 0 ? [] : _config$children;\n\n    for (var i = 0; i < children.length; i++) {\n      parentNode.append(createNode.call(this, {\n        globalConfig: globalConfig,\n        config: children[i],\n        parentNode: parentNode\n      }));\n    }\n  }\n}\n/**\r\n * initEvents\r\n * @access private\r\n */\n\n\nfunction initEvents() {\n  if (this.config && this.config.listeners) {\n    var _this$config$listener = this.config.listeners,\n        listeners = _this$config$listener === void 0 ? {} : _this$config$listener;\n    var keys = Object.keys(listeners);\n\n    for (var i = 0; i < keys.length; i += 1) {\n      var p = keys[i];\n      this.events.on(p, listeners[p]);\n    }\n  }\n}\n/**\r\n * find\r\n * @param {Array} - result\r\n * @param {TreeNode} - treeNode\r\n * @param {String} - key\r\n * @param {String} - value\r\n */\n\n\nfunction find(_ref3) {\n  var result = _ref3.result,\n      treeNode = _ref3.treeNode,\n      key = _ref3.key,\n      value = _ref3.value;\n\n  if (treeNode.hasAttr(key, value)) {\n    result.push(treeNode);\n  }\n\n  if (!treeNode.isLeaf()) {\n    var childrens = treeNode.childrens();\n\n    for (var i = 0; i < childrens.length; i++) {\n      find.call(this, {\n        result: result,\n        treeNode: childrens[i],\n        key: key,\n        value: value\n      });\n    }\n  }\n}\n/**\r\n * Tree\r\n * @class Tree\r\n * @classdesc Tree\r\n */\n\n\nvar Tree =\n/*#__PURE__*/\nfunction () {\n  /**\r\n   * constructor\r\n   * @constructor\r\n   * @param {HTMLElement} - el\r\n   * @param {Object} - config\r\n   */\n  function Tree(el, config) {\n    (0, _classCallCheck2.default)(this, Tree);\n    this.el = el;\n    this.config = Object.assign({}, config);\n    this.events = new _uiUtil.Events();\n    this.nodes = [];\n    initEvents.call(this);\n    init.call(this);\n  }\n  /**\r\n   * renderChildren\r\n   * @param {TreeNode} - parentNode\r\n   * @param {Object} - globalConfig\r\n   * @param {Object} - config\r\n   */\n\n\n  (0, _createClass2.default)(Tree, [{\n    key: \"renderChildren\",\n    value: function renderChildren(params) {\n      _renderChildren.call(this, params);\n    }\n    /**\r\n     * append\r\n     * @param {TreeNode} - treeNode\r\n     */\n\n  }, {\n    key: \"append\",\n    value: function append(treeNode) {\n      this.nodes.push(treeNode);\n      this.el.appendChild(treeNode.getEl());\n      detailItemInputs.call(this);\n    }\n    /**\r\n     * appendByConfig\r\n     * @param {Object} - config\r\n     */\n\n  }, {\n    key: \"appendByConfig\",\n    value: function appendByConfig(config) {\n      var _this$config$nodeConf2 = this.config.nodeConfig,\n          nodeConfig = _this$config$nodeConf2 === void 0 ? {} : _this$config$nodeConf2;\n      var globalConfig = nodeConfig.config;\n      var treeNode = createNode.call(this, {\n        globalConfig: globalConfig,\n        config: config,\n        parentNode: null\n      });\n      this.append(treeNode);\n    }\n    /**\r\n     * prepend\r\n     * @param {TreeNode} - treeNode\r\n     */\n\n  }, {\n    key: \"prepend\",\n    value: function prepend(treeNode) {\n      this.nodes.unshift(treeNode);\n\n      _uiUtil.Dom6.prepend(this.el, treeNode.getEl());\n\n      detailItemInputs.call(this);\n    }\n    /**\r\n     * prependByConfig\r\n     * @param {Object} - config\r\n     */\n\n  }, {\n    key: \"prependByConfig\",\n    value: function prependByConfig(config) {\n      var _this$config$nodeConf3 = this.config.nodeConfig,\n          nodeConfig = _this$config$nodeConf3 === void 0 ? {} : _this$config$nodeConf3;\n      var globalConfig = nodeConfig.config;\n      var treeNode = createNode.call(this, {\n        globalConfig: globalConfig,\n        config: config,\n        parentNode: null\n      });\n      this.prepend(treeNode);\n    }\n    /**\r\n     * insertBefore\r\n     * @param {TreeNode} - treeNode\r\n     * @param {TreeNode} - newNode\r\n     */\n\n  }, {\n    key: \"insertBefore\",\n    value: function insertBefore(treeNode, newNode) {\n      if (!treeNode || !newNode) return false;\n      var index = this.nodes.findIndex(function (n) {\n        return n === treeNode;\n      });\n\n      if (index === -1) {\n        this.append(newNode);\n      } else if (index === 0) {\n        this.prepend(newNode);\n      } else {\n        // dom\n        this.el.insertBefore(newNode.getEl(), treeNode.getEl()); // array\n\n        this.nodes.splice(index, 0, newNode);\n        detailItemInputs.call(this);\n      }\n    }\n    /**\r\n     * insertBeforeByConfig\r\n     * @param {TreeNode} - treeNode\r\n     * @param {Object} - config\r\n     */\n\n  }, {\n    key: \"insertBeforeByConfig\",\n    value: function insertBeforeByConfig(treeNode, config) {\n      var _this$config$nodeConf4 = this.config.nodeConfig,\n          nodeConfig = _this$config$nodeConf4 === void 0 ? {} : _this$config$nodeConf4;\n      var globalConfig = nodeConfig.config;\n      var newNode = createNode.call(this, {\n        globalConfig: globalConfig,\n        config: config,\n        parentNode: null\n      });\n      this.insertBefore(treeNode, newNode);\n    }\n    /**\r\n     * insertAfter\r\n     * @param {TreeNode} - treeNode\r\n     * @param {TreeNode} - newNode\r\n     */\n\n  }, {\n    key: \"insertAfter\",\n    value: function insertAfter(treeNode, newNode) {\n      if (!treeNode || !newNode) return false;\n      var index = this.nodes.findIndex(function (n) {\n        return n === treeNode;\n      });\n\n      if (index === -1) {\n        this.append(newNode);\n      } else if (index === this.nodes.length - 1) {\n        this.prepend(newNode);\n      } else {\n        // dom\n        _uiUtil.Dom6.insertAfter(newNode.getEl(), treeNode.getEl()); // array\n\n\n        this.nodes.splice(index + 1, 0, newNode);\n        detailItemInputs.call(this);\n      }\n    }\n    /**\r\n     * insertAfterByConfig\r\n     * @param {TreeNode} - treeNode\r\n     * @param {Object} - config\r\n     */\n\n  }, {\n    key: \"insertAfterByConfig\",\n    value: function insertAfterByConfig(treeNode, config) {\n      var _this$config$nodeConf5 = this.config.nodeConfig,\n          nodeConfig = _this$config$nodeConf5 === void 0 ? {} : _this$config$nodeConf5;\n      var globalConfig = nodeConfig.config;\n      var newNode = createNode.call(this, {\n        globalConfig: globalConfig,\n        config: config,\n        parentNode: null\n      });\n      this.insertAfter(treeNode, newNode);\n    }\n    /**\r\n     * replaceNode\r\n     * @param {TreeNode} - treeNode\r\n     * @param {TreeNode} - newNode\r\n     * @return {boolean}\r\n     */\n\n  }, {\n    key: \"replaceNode\",\n    value: function replaceNode(treeNode, newNode) {\n      if (!treeNode || !newNode) return false;\n      var index = this.nodes.findIndex(function (n) {\n        return n === treeNode;\n      });\n      if (index === -1) return false;\n      this.el.replaceChild(newNode.getEl(), treeNode.getEl());\n      this.nodes.splice(index, 1, newNode);\n      detailItemInputs.call(this);\n    }\n    /**\r\n     * replaceNodeByConfig\r\n     * @param {TreeNode} - treeNode\r\n     * @param {Object} - config\r\n     */\n\n  }, {\n    key: \"replaceNodeByConfig\",\n    value: function replaceNodeByConfig(treeNode, config) {\n      var _this$config$nodeConf6 = this.config.nodeConfig,\n          nodeConfig = _this$config$nodeConf6 === void 0 ? {} : _this$config$nodeConf6;\n      var globalConfig = nodeConfig.config;\n      var newNode = createNode.call(this, {\n        globalConfig: globalConfig,\n        config: config,\n        parentNode: null\n      });\n      this.replaceNode(treeNode, newNode);\n    }\n    /**\r\n     * removeChildren\r\n     * @param {TreeNode} treeNode\r\n     */\n\n  }, {\n    key: \"removeChildren\",\n    value: function removeChildren(treeNode) {\n      if (!treeNode) return false;\n      var index = this.nodes.findIndex(function (n) {\n        return n === treeNode;\n      });\n      if (index === -1) return false;\n      this.nodes.splice(index, 1);\n\n      _uiUtil.Dom6.remove(treeNode.getEl());\n\n      detailItemInputs.call(this);\n    }\n    /**\r\n     * childrenNodes\r\n     * @return {Array}\r\n     */\n\n  }, {\n    key: \"childrens\",\n    value: function childrens() {\n      return [].concat(this.nodes);\n    }\n    /**\r\n     * getNodeByAttr\r\n     * @param {String} - key\r\n     * @param {String} - value\r\n     * @return {TreeNode | Array<TreeNode>}\r\n     */\n\n  }, {\n    key: \"getNodeByAttr\",\n    value: function getNodeByAttr(key, value) {\n      var result = [];\n\n      for (var i = 0; i < this.nodes.length; i++) {\n        var treeNode = this.nodes[i];\n        find.call(this, {\n          result: result,\n          treeNode: treeNode,\n          key: key,\n          value: value\n        });\n      }\n\n      return result.length === 0 ? result[0] : result;\n    }\n    /**\r\n     * on 注册事件\r\n     * @param {string} type\r\n     * @param {Function} handler\r\n     */\n\n  }, {\n    key: \"on\",\n    value: function on(type, handler) {\n      this.events.on(type, handler);\n    }\n    /**\r\n     * 删除指定type下的事件或清除所有\r\n     * @param {string} type\r\n     * @param {Function} handler\r\n     */\n\n  }, {\n    key: \"off\",\n    value: function off(type, handler) {\n      if (type) {\n        if (handler) {\n          this.events.remove(type, handler);\n        } else {\n          this.events.clear(type);\n        }\n      } else {\n        this.events.clearAll();\n      }\n    }\n  }]);\n  return Tree;\n}();\n/**\r\n * TreeFactory\r\n */\n\n\nvar TreeFactory = {\n  /**\r\n   * 创建一个Tree\r\n   * @param {HtmlElement} - el\r\n   * @param {Object} - config\r\n   * @return {Tree} - Tree\r\n   */\n  create: function create(el, config) {\n    return new Tree(el, config);\n  }\n};\nvar _default = TreeFactory;\nexports.default = _default;"]}