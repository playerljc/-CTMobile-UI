const _interopRequireDefault = require('@babel/runtime/helpers/interopRequireDefault');

Object.defineProperty(exports, '__esModule', { value: !0 }), exports.default = _default; let _classCallCheck2 = _interopRequireDefault(require('@babel/runtime/helpers/classCallCheck')),
  _createClass2 = _interopRequireDefault(require('@babel/runtime/helpers/createClass'));

function getTemplateStr() { arguments.length > 0 && void 0 !== arguments[0] && arguments[0]; return '<div class="ct-fontsizesetting-rangeWrap">\n      <div class="ct-fontsizesetting-separatedtool">\n        <div class="ct-fontsizesetting-separated"><span>小</span></div>\n        <div class="ct-fontsizesetting-separated"><span>中</span></div>\n        <div class="ct-fontsizesetting-separated"><span>大</span></div>\n        <div class="ct-fontsizesetting-separated"><span>特大</span></div>\n      </div>\n      <input type="range" ...config>\n    </div>'; } function initial() { this.el.innerHTML = getTemplateStr(this.config); } function trigger() {
  let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 'change',
    t = arguments.length > 1 ? arguments[1] : void 0; this.events[e] && this.events[e](t);
} const FontSizeSetting = (function () { function i(e, t) { (0, _classCallCheck2.default)(this, i); const n = this; this.el = e, this.events = {}, this.config = t, initial.call(this), this.range = this.el.querySelector('input[type="range"]'), this.range.addEventListener('change', function () { n.events.change && trigger.call(n, 'change', this.value); }, !1); } return (0, _createClass2.default)(i, [{ key: 'setMin', value() { const e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0; this.range.setAttribute('min', e); } }, { key: 'setMax', value() { const e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : '100'; this.range.setAttribute('max', e); } }, { key: 'setSetp', value() { const e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : '1'; this.range.setAttribute('setp', e); } }, { key: 'setValue', value(e) { this.range.value = e, this.events.change && trigger.call(this, 'change', this.range.value); } }, { key: 'getValue', value() { return this.range.value; } }, { key: 'on', value(e, t) { this.events[e] = t; } }]), i; }()); function _default(e, t) { return new FontSizeSetting(e, t); }
// # sourceMappingURL=fontsizesetting.js.map
